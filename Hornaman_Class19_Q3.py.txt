#!/usr/bin/python3.12
#####################################
#
# Class 19: ODEs II, Runge-Kutta, Fortran
# Author: Blaine Hornaman
#
#####################################

import numpy as np
import matplotlib.pyplot as plt

# Initial conditions
t0 = 0
x0 = 1
t_end = 10
dt = 0.01
h = (t_end - t0) / (dt)

def RungeKutta2(differential_eq, x0, t0, t_end, dt):
    t_values = np.arange(t0, t_end + dt, dt)
    x_values = np.zeros(len(t_values))
    x_values[0] = x0

    for i in range(1, len(t_values)):
        t = t_values[i - 1]
        x = x_values[i - 1]
        k1 = h * differential_eq(x, t)
        k2 = h * differential_eq(x + 0.5 * k1, t + 0.5 * h)
        x_values[i] = x + k2

    return t_values, x_values


def differential_eq(x, t):
    my_eqn = -x ** 3 + np.sin(t)
    return my_eqn

# Solve using RK2 method
t_values, x_values = RungeKutta2(differential_eq, x0, t0, t_end, dt)

# Plotting the solution
plt.figure(figsize=(8, 5))
plt.plot(t_values, x_values, label="RK2 solution", color="b")
plt.xlabel("t")
plt.ylabel("x(t)")
plt.title("RK2 Solution for dx/dt = -x^3 + sin(t)")
plt.grid(True)
plt.legend()
#plt.show()
plt.savefig('RK2_python.png')
plt.close()