#!/usr/bin/python3.12
#####################################
#
# Class 12: Numerical Differentiation II
# Author: Blaine Hornaman
#
#####################################

import numpy as np
import matplotlib.pyplot as plt
from math  import tanh, cosh

import sys
sys.path.append('../')
import my_functions_lib as mfl

## compute the instantaneous derivatives
## using the central difference approximation
## over the interval -2 to 2

x_lower_bound = -2.0
x_upper_bound = 2.0

N_samples = 100

#####################
#
# Try different values of h
# What did we "prove" h should be
# for C = 10^(-16) in Python?
#
#######################

h1 = 0.01
h2 = 2
h3 = 1
h4 = 1e-13
h5 = 0.1

xdata = np.linspace(x_lower_bound, x_upper_bound, N_samples)

central_diff_values1 = []
central_diff_values2 = []
central_diff_values3 = []
central_diff_values4 = []
central_diff_values5 = []

for x in xdata:
	central_difference1 = ( mfl.f(x + 0.5*h1) - mfl.f(x - 0.5*h1) ) / h1
	central_difference2 = ( mfl.f(x + 0.5*h2) - mfl.f(x - 0.5*h2) ) / h2
	central_difference3 = ( mfl.f(x + 0.5*h3) - mfl.f(x - 0.5*h3) ) / h3
	central_difference4 = ( mfl.f(x + 0.5*h4) - mfl.f(x - 0.5*h4) ) / h4
	central_difference5 = ( mfl.f(x + 0.5*h5) - mfl.f(x - 0.5*h5) ) / h5
 
 
	central_diff_values1.append(central_difference1)
	central_diff_values2.append(central_difference2)
	central_diff_values3.append(central_difference3)
	central_diff_values4.append(central_difference4)
	central_diff_values5.append(central_difference5)

## Add the analytical curve
## let's use the same xdata array we already made for our x values

analytical_values = []
for x in xdata:
	dfdx = mfl.analytic_derivative_f(x)
	analytical_values.append(dfdx)

plt.plot(xdata, analytical_values, linestyle='-', color='black')
plt.plot(xdata, central_diff_values1, color="blue", markersize=8, alpha=0.5, label = 'h1 = 0.01')
plt.plot(xdata, central_diff_values2, color="orange", markersize=8, alpha=0.5, label = 'h2 = 2')
plt.plot(xdata, central_diff_values3, color="green", markersize=8, alpha=0.5, label = 'h3 = 1')
plt.plot(xdata, central_diff_values4, color="red", markersize=8, alpha=0.5, label = 'h4 = 1e-13')
plt.plot(xdata, central_diff_values5, color="purple", markersize=8, alpha=0.5, label = 'h5 = 0.1')
plt.legend(loc = 'upper left')
plt.savefig('numerical_vs_analytic_derivatives.png')
plt.close()